/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    'root': RouteRecordInfo<'root', '/', Record<never, never>, Record<never, never>>,
    '$error': RouteRecordInfo<'$error', '/:error(.*)', { error: ParamValue<true> }, { error: ParamValue<false> }>,
    'admin-dashboard': RouteRecordInfo<'admin-dashboard', '/admin/dashboard', Record<never, never>, Record<never, never>>,
    'admin-forget-password': RouteRecordInfo<'admin-forget-password', '/admin/forget-password', Record<never, never>, Record<never, never>>,
    'admin-login': RouteRecordInfo<'admin-login', '/admin/login', Record<never, never>, Record<never, never>>,
    'admin-merchants': RouteRecordInfo<'admin-merchants', '/admin/merchants', Record<never, never>, Record<never, never>>,
    'admin-reset-password': RouteRecordInfo<'admin-reset-password', '/admin/reset-password', Record<never, never>, Record<never, never>>,
    'admin-roles': RouteRecordInfo<'admin-roles', '/admin/roles', Record<never, never>, Record<never, never>>,
    'admin-roles-add': RouteRecordInfo<'admin-roles-add', '/admin/roles/add', Record<never, never>, Record<never, never>>,
    'admin-roles-edit-id': RouteRecordInfo<'admin-roles-edit-id', '/admin/roles/edit/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    'admin-users': RouteRecordInfo<'admin-users', '/admin/users', Record<never, never>, Record<never, never>>,
    'change-password': RouteRecordInfo<'change-password', '/change-password', Record<never, never>, Record<never, never>>,
    'dashboard': RouteRecordInfo<'dashboard', '/dashboard', Record<never, never>, Record<never, never>>,
    'dashboard-customers': RouteRecordInfo<'dashboard-customers', '/dashboard/customers', Record<never, never>, Record<never, never>>,
    'dashboard-inventory': RouteRecordInfo<'dashboard-inventory', '/dashboard/inventory', Record<never, never>, Record<never, never>>,
    'dashboard-inventory-brands': RouteRecordInfo<'dashboard-inventory-brands', '/dashboard/inventory/brands', Record<never, never>, Record<never, never>>,
    'dashboard-inventory-categories': RouteRecordInfo<'dashboard-inventory-categories', '/dashboard/inventory/categories', Record<never, never>, Record<never, never>>,
    'dashboard-inventory-discounts': RouteRecordInfo<'dashboard-inventory-discounts', '/dashboard/inventory/discounts', Record<never, never>, Record<never, never>>,
    'dashboard-inventory-modifiers': RouteRecordInfo<'dashboard-inventory-modifiers', '/dashboard/inventory/modifiers', Record<never, never>, Record<never, never>>,
    'dashboard-inventory-order-types': RouteRecordInfo<'dashboard-inventory-order-types', '/dashboard/inventory/order-types', Record<never, never>, Record<never, never>>,
    'dashboard-inventory-products': RouteRecordInfo<'dashboard-inventory-products', '/dashboard/inventory/products', Record<never, never>, Record<never, never>>,
    'dashboard-inventory-settings': RouteRecordInfo<'dashboard-inventory-settings', '/dashboard/inventory/settings', Record<never, never>, Record<never, never>>,
    'dashboard-inventory-taxes': RouteRecordInfo<'dashboard-inventory-taxes', '/dashboard/inventory/taxes', Record<never, never>, Record<never, never>>,
    'dashboard-locations': RouteRecordInfo<'dashboard-locations', '/dashboard/locations', Record<never, never>, Record<never, never>>,
    'dashboard-operators': RouteRecordInfo<'dashboard-operators', '/dashboard/operators', Record<never, never>, Record<never, never>>,
    'dashboard-roles': RouteRecordInfo<'dashboard-roles', '/dashboard/roles', Record<never, never>, Record<never, never>>,
    'dashboard-sales-list': RouteRecordInfo<'dashboard-sales-list', '/dashboard/sales-list', Record<never, never>, Record<never, never>>,
    'dashboard-settings': RouteRecordInfo<'dashboard-settings', '/dashboard/settings', Record<never, never>, Record<never, never>>,
    'dashboard-settings-assistant': RouteRecordInfo<'dashboard-settings-assistant', '/dashboard/settings/assistant', Record<never, never>, Record<never, never>>,
    'dashboard-settings-delivery-presets': RouteRecordInfo<'dashboard-settings-delivery-presets', '/dashboard/settings/delivery-presets', Record<never, never>, Record<never, never>>,
    'dashboard-settings-printers': RouteRecordInfo<'dashboard-settings-printers', '/dashboard/settings/printers', Record<never, never>, Record<never, never>>,
    'dashboard-settings-receipts': RouteRecordInfo<'dashboard-settings-receipts', '/dashboard/settings/receipts', Record<never, never>, Record<never, never>>,
    'dashboard-settings-refund-reasons': RouteRecordInfo<'dashboard-settings-refund-reasons', '/dashboard/settings/refund-reasons', Record<never, never>, Record<never, never>>,
    'dashboard-settings-terminals': RouteRecordInfo<'dashboard-settings-terminals', '/dashboard/settings/terminals', Record<never, never>, Record<never, never>>,
    'dashboard-settings-tips': RouteRecordInfo<'dashboard-settings-tips', '/dashboard/settings/tips', Record<never, never>, Record<never, never>>,
    'dashboard-tapes': RouteRecordInfo<'dashboard-tapes', '/dashboard/tapes', Record<never, never>, Record<never, never>>,
    'dashboard-tapes-xoperator-tapes': RouteRecordInfo<'dashboard-tapes-xoperator-tapes', '/dashboard/tapes/x-operator-tapes', Record<never, never>, Record<never, never>>,
    'dashboard-tapes-xtapes': RouteRecordInfo<'dashboard-tapes-xtapes', '/dashboard/tapes/x-tapes', Record<never, never>, Record<never, never>>,
    'dashboard-tapes-ztapes': RouteRecordInfo<'dashboard-tapes-ztapes', '/dashboard/tapes/z-tapes', Record<never, never>, Record<never, never>>,
    'forget-password': RouteRecordInfo<'forget-password', '/forget-password', Record<never, never>, Record<never, never>>,
    'login': RouteRecordInfo<'login', '/login', Record<never, never>, Record<never, never>>,
    'permissions-error': RouteRecordInfo<'permissions-error', '/permissions-error', Record<never, never>, Record<never, never>>,
    'reset-password': RouteRecordInfo<'reset-password', '/reset-password', Record<never, never>, Record<never, never>>,
    'tenants': RouteRecordInfo<'tenants', '/tenants', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
